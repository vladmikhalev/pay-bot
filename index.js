require("dotenv").config();
const {Bot, GrammyError, HttpError, Keyboard, InlineKeyboard, InputFile} = require("grammy");
const {hydrate} = require("@grammyjs/hydrate");

const bot = new Bot(process.env.BOT_API_KEY);
bot.use(hydrate());

bot.api.setMyCommands([
	{
		command: "start",
		description: "–∑–∞–ø—É—Å–∫ –±–æ—Ç–∞",
	},
	{
		command: "say_hello",
		description: "–ü–æ–ª—É—á–∏—Ç—å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ",
	},
	{
		command: "menu",
		description: "–ü–æ–ª—É—á–∏—Ç—å –º–µ–Ω—é",
	},
	{
		command: "faq",
		description: "–û—Ç–≤–µ—Ç—ã –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã",
	},
	{
		command: "help",
		description: "–ü–æ–º–æ—â—å",
	},
	{
		command: "id",
		description: "–£–∑–Ω–∞—Ç—å —Å–≤–æ–π id",
	},
	{
		command: "mood",
		description: "–£–∑–Ω–∞—Ç—å –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ",
	},
	{
		command: "share",
		description: "–ü–æ–¥–µ–ª–∏—Ç—å—Å—è",
	},
	{
		command: "inline_keyboard",
		description: "–ò–Ω–ª–∞–π–Ω –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞",
	},
]);

bot.command("start", async ctx => {
	await ctx.reply("–ü—Ä–∏–≤–µ—Ç, —è –±–æ—Ç —Å–∞–º–æ–≥–æ –ª—É—á—à–µ–≥–æ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ —è–∑—ã–∫–∞. –ë—ã—Å—Ç—Ä–µ–µ –∑–∞–ø–∏—Å—ã–≤–∞–π—Ç–µ—Å—å –Ω–∞ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ –∏ –≥—Ä—É–ø–ø–æ–≤—ã–µ —É—Ä–æ–∫–∏ –∫ <a href='https://t.me/juliaamikhaleva'><b>Julia Mikhaleva</b></a>", {
		// reply_parameters: {message_id: ctx.msg.message_id}
		parse_mode: "HTML",
		disable_web_page_preview: true,
		// parse_mode: "MarkdownV2",
	});

	await ctx.replyWithAnimation(new InputFile("./media/shrek-reaction.mp4"));
});

const menuKeyboard = new InlineKeyboard()
.pay('–û–ø–ª–∞—Ç–∏—Ç—å')
  // .text("–£–∑–Ω–∞—Ç—å —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑", "order-status")
  // .text("–û–±—Ä–∞—Ç–∏—Ç—å—Å—è –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É", "support")
  ;

const backKeyboard = new InlineKeyboard()
  .text("< –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", "back");

bot.command("menu", async ctx => {
	await ctx.reply("–í—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç –º–µ–Ω—é", {
		reply_markup: menuKeyboard,
	});
});

bot.callbackQuery("order-status", async ctx => {
	await ctx.callbackQuery.message.editText("–°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ –≤ –ø—É—Ç–∏", {
		reply_markup: backKeyboard,
	});
	await ctx.answerCallbackQuery();
});

bot.callbackQuery("support", async ctx => {
	await ctx.callbackQuery.message.editText("–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å", {
		reply_markup: backKeyboard,
	});
	await ctx.answerCallbackQuery();
});

bot.callbackQuery("back", async ctx => {
	await ctx.callbackQuery.message.editText("–í—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç –º–µ–Ω—é", {
		reply_markup: menuKeyboard,
	});
	await ctx.answerCallbackQuery();
});


bot.hears("–•–æ—Ä–æ—à–æ üëç", async ctx => {
	await ctx.reply("–ö–ª–∞—Å—Å!!", {
		reply_markup: {
			remove_keyboard: true,
		},
	});
});

// –∏–Ω–ª–∞–π–Ω –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞
bot.command("inline_keyboard", async ctx => {
	const inlineKeyboard = new InlineKeyboard().text("1", "button-1").row().text("2", "button-2").row().text("3", "button-3").row().url("–ü–µ—Ä–µ–π—Ç–∏ –≤ —Ç–≥ –∫–∞–Ω–∞–ª", "https://t.me/juliaamikhaleva");

	// const inlineKeyboard2 = new InlineKeyboard().url("–ü–µ—Ä–µ–π—Ç–∏ –≤ —Ç–≥ –∫–∞–Ω–∞–ª", "https://t.me/juliaamikhaleva");

	await ctx.reply("–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É", {
		reply_markup: inlineKeyboard,
	});
});

bot.callbackQuery(/button-[1-3]/, async ctx => {
	// console.log(ctx.update.callback_query.data)
	await ctx.answerCallbackQuery("–í—ã –≤—ã–±—Ä–∞–ª–∏ —Ü–∏—Ñ—Ä—É!");
	await ctx.reply(`–í—ã –≤—ã–±—Ä–∞–ª–∏ –∫–Ω–æ–ø–∫—É: ${ctx.update.callback_query.data}`);
});
// bot.on("callback_query:data", async ctx => {
// 	  await ctx.answerCallbackQuery();
// 	  await ctx.reply(`–í—ã –≤—ã–±—Ä–∞–ª–∏ —Ü–∏—Ñ—Ä—É: ${ctx.callbackQuery.data}`)
// })

bot.command("mood", async ctx => {
	// const moodKeyboard = new Keyboard()
	//   .text("–•–æ—Ä–æ—à–æ üëç")
	//   .row()
	//   .text("–ù–æ—Ä–º")
	//   .row()
	//   .text("–ù–µ –æ—á–µ–Ω—å")
	//   .row()
	//   .text("–ü–ª–æ—Ö–æ")
	//   .resized();

	const moodLabels = ["–•–æ—Ä–æ—à–æ üëç", "–ù–æ—Ä–º", "–ù–µ –æ—á–µ–Ω—å", "–ü–ª–æ—Ö–æ"];
	const rows = moodLabels.map(label => {
		return [Keyboard.text(label)];
	});
	const moodKeyboard2 = Keyboard.from(rows).resized();

	await ctx.reply("–ö–∞–∫ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ?", {
		reply_markup: moodKeyboard2,
	});
});

bot.command("share", async ctx => {
	const shareKeyboard = new Keyboard().requestLocation("–ì–µ–æ–ª–æ–∫–∞—Ü–∏—è").requestContact("–ö–æ–Ω—Ç–∞–∫—Ç").requestPoll("–û–ø—Ä–æ—Å").placeholder("–£–∫–∞–∂–∏ –¥–∞–Ω–Ω—ã–µ...").resized();

	await ctx.reply("–ß–µ–º —Ö–æ—á–µ—à—å –ø–æ–¥–µ–ª–∏—Ç—å—Å—è?", {
		reply_markup: shareKeyboard,
	});
});

bot.on(":contact", async ctx => {
	await ctx.reply("–°–ø–∞—Å–∏–±–æ!");
});

bot.command("id", async ctx => {
	await ctx.reply(`–í–∞—à ID: ${ctx.from.id}`);
});

bot.command("say_hello", async ctx => {
	await ctx.react("üëÄ");
	await ctx.reply("*_Hello_*", {
		parse_mode: "MarkdownV2",
	});
});

bot.command("faq", async ctx => {
	await ctx.reply("–ó–¥–µ—Å—å –±—É–¥—É—Ç –æ—Ç–≤–µ—Ç—ã –Ω–∞ —á–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã");
});

bot.command("help", async ctx => {
	await ctx.reply("–°–∫–æ—Ä–æ –±—É–¥–µ—Ç —Ä–∞–∑–¥–µ–ª —Å –ø–æ–º–æ—â—å—é");
});

bot.hears(/–ø–∏–ø–µ—Ü/, async ctx => {
	await ctx.reply("–†—É–≥–∞—Ç—å—Å—è –Ω–µ –∫—Ä–∞—Å–∏–≤–æ");
});

bot.on("message:entities:url", async ctx => {
	await ctx.reply("–í —ç—Ç–æ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –µ—Å—Ç—å url");
});

// bot.on("message").filter(
//   ctx => {
// 		return ctx.from.id === 520129533;
// 	},
// 	async ctx => {
// 		await ctx.reply("–ü—Ä–∏–≤–µ—Ç –∞–¥–º–∏–Ω");
// 	}
// );
// bot.on("message", async (ctx) => {
// 	await ctx.reply("–í —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ...");
// });

bot.catch(err => {
	const ctx = err.ctx;
	console.error(`Error while handing update ${ctx.update.update_id}:`);
	const e = err.error;
	if (e instanceof GrammyError) {
		console.error("Error in request:", e.description);
	} else if (e instanceof HttpError) {
		console.error("Could not contact Telegram:", e);
	} else {
		console.error("Unknown error:", e);
	}
});

bot.start();
